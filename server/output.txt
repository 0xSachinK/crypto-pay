yarn run v1.22.19
warning ../package.json: No license field
$ node app.js
server running on port 8080
get Auth Request
req body:  {
  recepientMobileNumber: 234,
  amount: 3,
  token: '0x0000000000000000000000000000000000001010-18'
}
callback
request body: 
<ref *2> IncomingMessage {
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
    pipes: [],
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    constructed: true,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: true,
    destroyed: false,
    errored: null,
    closed: false,
    closeEmitted: false,
    defaultEncoding: 'utf8',
    awaitDrainWriters: null,
    multiAwaitDrain: false,
    readingMore: true,
    dataEmitted: false,
    decoder: null,
    encoding: null,
    [Symbol(kPaused)]: null
  },
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      constructed: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::8080',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 837,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 121612,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 836,
        [Symbol(triggerId)]: 1
      },
      [Symbol(kUniqueHeaders)]: null
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::8080',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 837,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 121612,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 836,
        [Symbol(triggerId)]: 1
      },
      [Symbol(kUniqueHeaders)]: null
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Circular *1],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kEndCalled)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(kUniqueHeaders)]: null
    },
    [Symbol(async_id_symbol)]: 867,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  rawHeaders: [
    'user-agent',
    'Dart/2.18 (dart:io)',
    'content-type',
    'text/plain; charset=utf-8',
    'accept',
    '*/*',
    'accept-encoding',
    'gzip',
    'content-length',
    '5280',
    'host',
    '192.168.43.21:8080'
  ],
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/api/callback?sessionId=1',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      constructed: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::8080',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 837,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 121612,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 836,
        [Symbol(triggerId)]: 1
      },
      [Symbol(kUniqueHeaders)]: null
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::8080',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 837,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 121612,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 836,
        [Symbol(triggerId)]: 1
      },
      [Symbol(kUniqueHeaders)]: null
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Circular *1],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kEndCalled)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(kUniqueHeaders)]: null
    },
    [Symbol(async_id_symbol)]: 867,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/api/callback?sessionId=1',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: '?sessionId=1',
    query: 'sessionId=1',
    pathname: '/api/callback',
    path: '/api/callback?sessionId=1',
    href: '/api/callback?sessionId=1',
    _raw: '/api/callback?sessionId=1'
  },
  params: {},
  query: { sessionId: '1' },
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *3],
      [Symbol(async_id_symbol)]: 867,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: [Circular *2],
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kEndCalled)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      'access-control-allow-origin': [Array]
    },
    [Symbol(kUniqueHeaders)]: null
  },
  body: {},
  route: Route {
    path: '/api/callback',
    stack: [ [Layer] ],
    methods: { post: true }
  },
  [Symbol(kCapture)]: false,
  [Symbol(kHeaders)]: {
    'user-agent': 'Dart/2.18 (dart:io)',
    'content-type': 'text/plain; charset=utf-8',
    accept: '*/*',
    'accept-encoding': 'gzip',
    'content-length': '5280',
    host: '192.168.43.21:8080'
  },
  [Symbol(kHeadersCount)]: 12,
  [Symbol(kTrailers)]: null,
  [Symbol(kTrailersCount)]: 0
}
Request returned in callback
tokenStr: eyJhbGciOiJncm90aDE2IiwiY2lyY3VpdElkIjoiYXV0aCIsImNyaXQiOlsiY2lyY3VpdElkIl0sInR5cCI6ImFwcGxpY2F0aW9uL2lkZW4zLXprcC1qc29uIn0.eyJpZCI6IjQ2MTZiYTE4LWM5ODktNDk1YS1hZjk5LTQ5OGU4MzFmZjUyNSIsInR5cCI6ImFwcGxpY2F0aW9uL2lkZW4zY29tbS1wbGFpbi1qc29uIiwidHlwZSI6Imh0dHBzOi8vaWRlbjMtY29tbXVuaWNhdGlvbi5pby9hdXRob3JpemF0aW9uLzEuMC9yZXNwb25zZSIsInRoaWQiOiI4YjliMGI2MS05Y2M1LTQzZGQtOTc4ZC1hMzhjOWM3NTcyYTEiLCJmcm9tIjoiMTE1NWVyYjM0dnAxZzZ6TkJZd0tBVWVTTWtYdkFoVnpXMlVDQmJwdXQ5IiwidG8iOiIxMTlzcFJEOGdmQ3ZCTGVzR1VLSzh5Zjd3V3ZyN0dVaDM5dkFRU0VGQzYiLCJib2R5Ijp7ImRpZF9kb2MiOnsiQGNvbnRleHQiOlsiaHR0cHM6Ly93d3cudzMub3JnL25zL2RpZC92MSJdLCJpZCI6ImRpZDppZGVuMzpwb2x5Z29uOm1haW46MTE1NWVyYjM0dnAxZzZ6TkJZd0tBVWVTTWtYdkFoVnpXMlVDQmJwdXQ5Iiwic2VydmljZSI6W3siaWQiOiJkaWQ6aWRlbjM6cG9seWdvbjptYWluOjExNTVlcmIzNHZwMWc2ek5CWXdLQVVlU01rWHZBaFZ6VzJVQ0JicHV0OSNwdXNoIiwidHlwZSI6InB1c2gtbm90aWZpY2F0aW9uIiwic2VydmljZUVuZHBvaW50IjoiaHR0cHM6Ly9wdXNoLnBvbHlnb25pZC5tZS9hcGkvdjEiLCJtZXRhZGF0YSI6eyJkZXZpY2VzIjpbeyJjaXBoZXJ0ZXh0IjoiSTVHVlc3NkZzWTNpeWtTUjBnZjZZU1Z4UzBvVGJLTDZhN1R3elJtNHBXclN1Mk8xOVRTd1BFUVJZS1NpOG5JM2pOYjB0Z0RPNzlaQTZ4N0V6ektNbFBqZ21EeitKd1VmYVltUTl6czVIMmhkMjkvaW5YWVV2RXd1ektmK0FNdUxaSjJ6M0RmNzNWTm0yNmYybXpOcXpqK3NHOHcxYmdlQ3llZmE3RGx4aytCMldQc09PMVhFekxsL280MzhXNzA3YWY2VVZsWS8zeGJFNm9tcGdEd25BZXNBYnZDQmtUWWJaOG04UFFxeWRnOHZHUzlJbUtXWG1LbWVFQnVFM3E1OTc1dGdBaTQ1dDVaNkpORzJPUlNNa01SWnBEbm80c1lZdnJrVWhoSDczYldXYUhLVENma3E4NWhvUldtYXFkdXRKbmdMZEJqOGZaUFFNeTQxc1QrZ1pWWFlROThQNmtBajd3MDhpK0VucXFKOHNoSnR1WDZRQ3ZXaVNqSitkaU5RS2NoTmJpY283aFljL1VxYWRkU0VwakJOWmQ0QjdVZHZnUTRWT3FOcm5UZVMxcFZpWEpVZEJYNlRjYW1tbEJleERlTGV0d1lncTRjVWl5czJEYnFXZzFpT2hka21tWnJnOWVpcncrZk5Wa3Npakw5aExpOHFlQmtBY2w4STgwMG1ZNXg4eWlZaEllOHZuWExDSkN2V1BmL2VsajhvWXJUdHdPaHl0d0NRUmpycTE4QVZtbDE3ZjVuZjV1WW5PTU8xQ0d2U05ySXR0VE5UQVkwdVh2WC90SXFCZjVkaFhqMDJIa2RhMmpBL0xJRjhETzdMNHR6OHJLU2g0WFJScEFvYVY4VGcyaXZZY1piWkpPL2s2b2tlRE9yb2R1Qnc5YUsydXlLVmc1ak1pRGs9IiwiYWxnIjoiUlNBLU9BRVAtNTEyIn1dfX1dfSwibWVzc2FnZSI6IiIsInNjb3BlIjpbeyJpZCI6MSwiY2lyY3VpdF9pZCI6ImNyZWRlbnRpYWxBdG9taWNRdWVyeVNpZyIsInByb29mIjp7InBpX2EiOlsiMjE2MTMwMTU0Mjg1MTUzMTUyNTE1NTkyMzU3Mzk2NTI3OTMwMTk5ODk5Mjk1NDQ5NDE3NTQ4Mzg5NzI4MTI1NTEwODIyMTI5Mjc0NDUiLCI3MDQyMTQ0OTcxODQ0MjIwODU2Nzk4NjgwMTUzNDM3NTU2OTEyNDM0MzgzNzA5NTU3MDYxMjcwMTcyNzMyNjU2Mzc5MDY2MTA1OTQ3IiwiMSJdLCJwaV9iIjpbWyIyNzY0MzA3ODU3NTU5ODU1MDk2MTIxNDQxNTIxOTMwNjkxODc2MjE3ODg3MjgzMjk2MzgzNTU1NzU4NTIxMDk3NDUyODcyMDY1MzMyIiwiMTAxMzI3MDg5MjUwOTE5ODE4MDAyODg3NDc2MDE5NTQ2NzEwODI3ODc1Nzc1MTYzNDk3NTU3ODA3ODM2Mjk4NTk5NDM3NzIwNTI5MTYiXSxbIjk2NDQwNzIzNDc2ODAxODk0ODQ1NTIxMDI0MzY1NDc2MDg4MDc3NzY4NjA2ODg3ODIwMDczMTUwMTkwMDk5NTc4MzIxMjIxMDAwMTEiLCIxNjY2MTk5NzE5MDA5OTExNzYxOTM0MTU0NzIxNjkyNTE3NDYyNTAwNzY1NDczMzE0OTI1NjUxNzcwNDc1ODk2NTA1MzIwMTE4NjkzNCJdLFsiMSIsIjAiXV0sInBpX2MiOlsiMTcwMTM4OTI3OTU0NDAyODg1Njc1MzYyNTkzOTc1MzAxOTEwMzA4MTI2MjI1NzkyODcxMDYzMTc1NTEyNzQ5MTk1MzAwMjc2NDM3NzMiLCI3MjM2ODQyNDU0OTA4ODUxMDg1OTY3NTIyMDY1NzQzNTYwMTgyMzY4Mjg1ODk3NjA2NDM4NTI4ODU1NTI0MDA2NDM4NDIxNzgyMzIzIiwiMSJdLCJjdXJ2ZSI6bnVsbCwicHJvdG9jb2wiOiJncm90aDE2In0sInB1Yl9zaWduYWxzIjpbIjc4ODg2MDgzMjQzODI2NTIwODkzMzA3MTQ2ODA1MDIzMjgzNTczOTYwMDQ1NDY4MzIyMjQzNjcxOTEyMDMxMzQzODkyNDcyNzUzNDMiLCIzOTIzNDQ0MDYwMTI4ODA0NzYwMDA3MzQ0ODA5MzIzOTMwNTc5OTYxMTE1MDQ4MDg0MTg4OTE4MTY1NjM0MzM4MzAyMjAzNjU4MjQiLCIxMzk0OTE5NjA4MDc2NjgwMzM5ODc2MDQ2MTc1ODIzMzE2NjQ1MTA1Nzk2ODIxMzIyMjUzNjA3MTgyODk3MzQ3NzExODcyMDk1Nzc5NiIsIjEiLCIyODgwODYyNjQ0NTkwODE4NzAwNjg3NTA3MjgxMjgwOTQ4MjAwMjQ0NzI0NjQ2NzY2ODExMzgwMjY0MzgxMjkyNjI3NzEzNzIwMzIiLCIxNjI3Mjk1MTI4MTk4MDAzOTM3NDUxNjUxMjI0NjQyMzg3NDM3MTEyNTg0ODQyNTA3MDQ3MzYxODQyNzg3NzAzNjk4NDcwNDUxNTM1MyIsIjE2NzAwNDAwNzIiLCIzMTUwNjY2NjI3ODIzODQ4NDc1ODYwOTQ1MjU0ODI3NDE4MzY1NTkiLCIyIiwiMSIsIjEiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiXX1dfX0.eyJwcm9vZiI6eyJwaV9hIjpbIjIwNzM1NjU1MzYwMTEwMjUwODk2ODQ4NTY0MDU2MDgxMDQ1NzgwMjg4ODE3ODcxNDMxMTE1NjExMjE3NjQ4MDEzNTQwNTIyOTAxNTU2IiwiOTQxMzg4NjAxNjA3MjI3MzQ2OTAxMzcyOTM0NDA1NTI1MTU3MDA5NTkzMTQ3NDk3MTcyODM0NTQxOTU1NDYzMjM4NjI2MDIyNjQwMyIsIjEiXSwicGlfYiI6W1siMTIzNDk2MzUyODczNjA3NTM1MjAzOTA1NDU1NjQ3ODczNDg5NDc4OTMwMTIwNzUzOTYwNDQ4NDA0ODg4OTc1NjM2NDQ3MDgzMzYxMDUiLCIzMzI3ODk5NjIwOTA0MTkxMDU2NDU2MzM2ODM0MjU4MDU1MjcwMDI1MTMzNzYwNTUzNTQ2OTEyMDQwNjc5MjU3ODY5NTg4NDgyMTQ1Il0sWyIxMTg1MTcwNjIwODExMjgzMjQ0ODE2OTMwNzI0NTI5NDMwNjgyMjg1OTg2NjYxMDI4NzAzNjI4NjQzNjIyNzE4MDAzNTE5MDMyMzI3NiIsIjE3Nzc2MDEzNzY4MTYwMzQ3MTAwODA0NjY0NDY0NzE0MTEwNzgwNzI0MTYzODU1MDA1Njg5MTY5NTAwMTYwOTI4OTQwOTQ4NDU1MDk3Il0sWyIxIiwiMCJdXSwicGlfYyI6WyIxMjE4MDEyOTQ4NDk2NzQyNjAwOTk0NDgyMzc4NDY1MDg2NTE1MjI0MjU1MzQ3MDI2MDQ1MjM4Nzk3ODUwOTgxNzYzNjU4NjY0MDU4NiIsIjQ5ODAwNTc1NzM1MzQ1NDc0NzIxNzAyMzQ1NzU5NzE2MTA5NTgzNjg5NDI2MjU0NTI0NTk0OTQ2NjMyODc3Njc0MDc1NzgxMDU1NDEiLCIxIl0sInByb3RvY29sIjoiZ3JvdGgxNiJ9LCJwdWJfc2lnbmFscyI6WyIyMDA1ODAwNzc4NjI1NjQ3NjMyODI2MDkxNzEwNzU4NzE5MjU5NTQ3MTM4NjY0MjAwNDIxMzMyNjY3NDY1NDI1MjE0NzUzMTc3NzUxOCIsIjEzOTQ5MTk2MDgwNzY2ODAzMzk4NzYwNDYxNzU4MjMzMTY2NDUxMDU3OTY4MjEzMjIyNTM2MDcxODI4OTczNDc3MTE4NzIwOTU3Nzk2IiwiMzkyMzQ0NDA2MDEyODgwNDc2MDAwNzM0NDgwOTMyMzkzMDU3OTk2MTExNTA0ODA4NDE4ODkxODE2NTYzNDMzODMwMjIwMzY1ODI0Il19
authRequest.body {
  reason: 'Transfer funds',
  message: '',
  callbackUrl: 'http://192.168.43.21:8080/api/callback?sessionId=1',
  scope: [
    { id: 1, circuit_id: 'credentialAtomicQuerySig', rules: [Object] }
  ],
  data: {
    recepientMobileNumber: 234,
    amount: 3,
    token: '0x0000000000000000000000000000000000001010-18'
  }
}
/home/nightfury/Desktop/crypto-pay/server/app.js:145
  const done = await paymentContract.methods.submitTransferZKPResponse(
                                             ^

TypeError: Cannot read properties of undefined (reading 'submitTransferZKPResponse')
    at Callback (/home/nightfury/Desktop/crypto-pay/server/app.js:145:46)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)

Node.js v19.2.0
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
